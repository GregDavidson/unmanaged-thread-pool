* Naive Unmanaged Thread Pool

This is a naive Unmanaged Thread Pool.  The number of
threads may grow arbitarily large.

If you're wanting a Thread Pool which actively manages the
number of working and idle threads according to a policy,
check out our alternative project Managed-Thread-Pool.

+BEGIN_SRC rust
impl ThreadPool {
  fn new( ) -> ThreadPool
  fn execute<F>(&self, f: F) -> Result( (), ExecuteFail )
		where  F: FnOnce() + Send + 'static
  enum ExecuteFail {Disconnected};
#+END_SRC

** Idea for reducing the number of threads

The scheduler could close the existing MessageQueue and
create a new one.  The idle workers could respond to the
closed MessageQueue by terminating.  When the active workers
become idle again and try to connect, they could do the
same.
