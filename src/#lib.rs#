use std::thread;
use std::sync::mpsc;
use std::sync::Arc;
use std::sync::Mutex;

enum Message {
  NewJob(Job),
  Terminate,
}

pub struct ThreadPool {
  wait_milliseconds: Duration, // time to wait for a worker to become available before creating a new one
  sender: mpsc::Sender<Message>,
  receiver: mpsc::Receiver<Message>,
  id: usize,
}

trait FnBox {
  fn call(self: Box<Self>);
}

impl<F: FnOnce()> FnBox for F {
  fn call(self: Box<F>) {
    (*self)()
  }
}

type Job = Box<dyn FnBox + Send + 'static>;

impl ThreadPool {
  /// Create a new ThreadPool.
  ///
  /// The size is the number of threads in the pool.
  ///
  /// # Panics
  ///
  /// The `new` function will panic if the size is zero.
  pub fn new( wait_milliseconds: Duration ) -> ThreadPool {

    let (sender, receiver) = mpsc::sync_channel(0); // rendezvous channel
    let receiver = Arc::new(Mutex::new(receiver));
    
    ThreadPool { wait_milliseconds, sender, receiver, id:0 }
  }

  // reasons why an execute might fail
  enum ExecuteFail {
    Disconnected                 // wait, how could this happen, to us??
  };
  
  pub fn execute<F>(&self, f: F) -> Result( (), ExecuteFail )
    where  F: FnOnce() + Send + 'static
  {
    let job = Box::new(f);
    
    let mut slept: Bool = false;
    
    loop {
      match self.sender.try_send(Message::NewJob(job)) {
        Ok(_) => { // rendezvous successful, package delivered
          return Ok( () )
        },
        Err(e) => match e {
          Full => { // no worker available
            if slept {
              let _ = Worker::new(id, job, Arc::clone(&receiver));
              return ();
            } else {
              // sleep and try again
              thread::sleep(Duration::from_millis(wait_milliseconds));
              slept = true;
            }
          },
          Disconnected => {
            return Error( Disconnected );
          }
        }
      }
    }
  }
}

struct Worker {
  id: usize,
  thread: Option<thread::JoinHandle<()>>,
}

impl Worker {
  fn new(id: usize, job: Job, receiver: Arc<Mutex<mpsc::Receiver<Message>>>) -> Worker {
    
    let thread = thread::spawn(move ||{
      job.call();           // run our first job
      loop {
        let message = receiver.lock().unwrap().recv().unwrap();
        
        match message {
          Message::NewJob(job) => {
            eprintln!("Worker {} got a job; executing.", id);
            job.call();
          },
          Message::Terminate => {
            eprintln!("Worker {} was told to terminate.", id);
            break;
          },
        }
      }
    });
    
    Worker { id, thread: Some(thread) }
  }
}

#[cfg(test)]
mod tests {
  use super::*;
  
  #[test]
  /// run_multiple_tasks - check that they all execute and complete
  fn run_multiple_tasks() {
        assert_eq!(2 + 2, 4);
    }
  
  #[test]
  /// run_multiple_tasks with significant sleeps
  /// - check that they all execute and complete in time less than sum(sleeps)
  fn run_multiple_sleepy_tasks() {
    // do something!
        assert_eq!(4 + 4, 8);
    }
  
  #[test]
  /// run_multiple_tasks which block on external channel
  /// - check that they execute and complete independently
  fn run_multiple_blocking_tasks() {
    // do something!
        assert_eq!(4 + 2, 6);
    }
  }
}
